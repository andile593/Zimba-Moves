generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String          @id @default(uuid())
  role           Role
  email          String          @unique
  phone          String          @unique
  password       String
  firstName      String
  lastName       String
  status         UserStatus      @default(ACTIVE)
  googleId       String?         @unique
  profilePicture String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  Bookings       Booking[]
  Complaints     Complaint[]
  Provider       Provider?
  Quote          Quote[]
  PasswordReset  PasswordReset[]
}

model Provider {
  id              String         @id @default(uuid())
  userId          String         @unique
  earnings        Float          @default(0)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  includeHelpers  Boolean        @default(false)
  address         String?
  city            String?
  country         String?        @default("South Africa")
  latitude        Float?
  longitude       Float?
  postalCode      String?
  region          String?
  accountHolder   String?
  accountNumber   String?
  adminNotes      String?
  bankName        String?
  idNumber        String?
  rejectionReason String?
  reviewedAt      DateTime?
  reviewedBy      String?
  status          ProviderStatus @default(PENDING)
  bookings        Booking[]
  files           File[]
  Payment         Payment[]
  user            User           @relation(fields: [userId], references: [id])
  vehicles        Vehicle[]
  Quote           Quote[]
  paymentCards    PaymentCard[]
  payouts         Payout[]
}

model PaymentCard {
  id            String   @id @default(uuid())
  providerId    String
  accountNumber String
  accountName   String
  bankCode      String
  bankName      String
  recipientCode String? // Paystack recipient code for transfers
  isDefault     Boolean  @default(false)
  isVerified    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  provider Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  Payout   Payout[]

  @@index([providerId])
  @@index([isDefault])
}

model Payout {
  id            String       @id @default(uuid())
  providerId    String
  paymentCardId String
  amount        Float
  status        PayoutStatus @default(PENDING)
  transferCode  String?
  reference     String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  provider    Provider    @relation(fields: [providerId], references: [id])
  paymentCard PaymentCard @relation(fields: [paymentCardId], references: [id])

  @@index([providerId])
  @@index([status])
  @@index([createdAt])
}

model Vehicle {
  id         String      @id @default(uuid())
  providerId String
  make       String
  model      String
  year       Int
  color      String
  type       VehicleType
  capacity   Float
  weight     Float
  plate      String      @unique
  baseRate   Float
  perKmRate  Float       @default(0)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  bookings   Booking[]
  files      File[]
  provider   Provider    @relation(fields: [providerId], references: [id])
  Quote      Quote[]
}

model Booking {
  id                String        @id @default(uuid())
  customerId        String
  providerId        String
  vehicleId         String
  pickup            String
  dropoff           String
  moveType          MoveType
  dateTime          DateTime
  helpersRequired   Int           @default(0)
  status            BookingStatus @default(PENDING)
  pricing           Json
  paymentStatus     PaymentStatus @default(PENDING)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  helpersProvidedBy HelpersSource @default(PROVIDER)
  customer          User          @relation(fields: [customerId], references: [id])
  provider          Provider      @relation(fields: [providerId], references: [id])
  vehicle           Vehicle       @relation(fields: [vehicleId], references: [id])
  complaints        Complaint[]
  Payment           Payment?

  @@index([customerId])
  @@index([providerId])
  @@index([vehicleId])
  @@index([dateTime])
  @@index([status])
}

model Complaint {
  id          String          @id @default(uuid())
  customerId  String
  bookingId   String
  plateNumber String
  issueTarget IssueTarget
  description String
  status      ComplaintStatus @default(OPEN)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  booking     Booking         @relation(fields: [bookingId], references: [id])
  customer    User            @relation(fields: [customerId], references: [id])
  File        File[]
}

model Quote {
  id              String   @id @default(uuid())
  customerId      String
  providerId      String
  vehicleId       String
  pickup          String
  dropoff         String
  moveType        String
  helpersRequired Int      @default(0)
  instantEstimate Float
  status          String   @default("DRAFT")
  dateTime        DateTime
  distance        Float?
  duration        Int?
  distanceText    String?
  durationText    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  customer        User     @relation(fields: [customerId], references: [id])
  provider        Provider @relation(fields: [providerId], references: [id])
  vehicle         Vehicle  @relation(fields: [vehicleId], references: [id])

  @@map("quotes")
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String
  tokenHash String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Payment {
  id               String         @id @default(uuid())
  bookingId        String         @unique
  amount           Float
  status           PaymentStatus  @default(PENDING)
  providerId       String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  gatewayReference String?
  refundReference  String?
  booking          Booking        @relation(fields: [bookingId], references: [id])
  provider         Provider?      @relation(fields: [providerId], references: [id])
  events           PaymentEvent[]
  refunds          Refund[]

  @@index([status])
  @@index([gatewayReference])
}

model PaymentEvent {
  id         String   @id @default(uuid())
  paymentId  String
  gateway    String
  gatewayRef String?
  payload    Json
  createdAt  DateTime @default(now())
  type       String
  payment    Payment  @relation(fields: [paymentId], references: [id])

  @@unique([gateway, gatewayRef])
}

model Refund {
  id         String       @id @default(uuid())
  paymentId  String
  amount     Float
  gateway    String
  gatewayRef String?
  status     RefundStatus @default(PENDING)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  payment    Payment      @relation(fields: [paymentId], references: [id])
}

model WebhookLog {
  id         String   @id @default(uuid())
  gateway    String
  payload    Json
  headers    Json
  receivedAt DateTime @default(now())
}

model File {
  id          String       @id @default(uuid())
  url         String
  type        FileType
  category    FileCategory
  status      FileStatus   @default(PENDING)
  createdAt   DateTime     @default(now())
  complaintId String?
  providerId  String?
  vehicleId   String?
  complaint   Complaint?   @relation(fields: [complaintId], references: [id])
  provider    Provider?    @relation(fields: [providerId], references: [id])
  vehicle     Vehicle?     @relation(fields: [vehicleId], references: [id])
}

enum ProviderStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum FileType {
  IMAGE
  DOCUMENT
}

enum FileCategory {
  BRANDING
  EVIDENCE
  PROFILE_PIC
  ID_DOCUMENT
  PROOF_OF_ADDRESS
  VEHICLE_REGISTRATION_CERT
  DRIVERS_LICENSE
  OTHER
}

enum FileStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Role {
  CUSTOMER
  PROVIDER
  ADMIN
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  DELETED
}

enum VehicleType {
  SMALL_VAN
  MEDIUM_TRUCK
  LARGE_TRUCK
  OTHER
}

enum MoveType {
  APARTMENT
  OFFICE
  SINGLE_ITEM
  OTHER
}

enum HelpersSource {
  PROVIDER
  CUSTOMER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum RefundStatus {
  PENDING
  INITIATED
  COMPLETED
  FAILED
}

enum ComplaintStatus {
  OPEN
  UNDER_REVIEW
  RESOLVED
  REJECTED
}

enum IssueTarget {
  PROVIDER
  HELPER
  OTHER
}

enum QuoteStatus {
  DRAFT
  SENT
  ACCEPTED
  REJECTED
  EXPIRED
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
